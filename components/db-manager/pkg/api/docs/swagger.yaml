definitions:
  models.APIAttachments:
    properties:
      description:
        description: Description
        type: string
      name:
        type: string
    type: object
  models.APIDiscovered:
    properties:
      condition:
        allOf:
        - $ref: '#/definitions/models.JSONBMap'
        description: this will hold a JSONB in postgresql with the condition
      show:
        description: condition was met
        type: boolean
    type: object
  models.APIKnownLocations:
    properties:
      latitude:
        description: Latitude as signed float
        type: number
      longitude:
        description: Longitude as signed float
        type: number
      name:
        type: string
    type: object
  models.APINotes:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  models.APISpots:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  models.APIUsers:
    properties:
      bio:
        type: string
      birthday:
        type: string
      email:
        type: string
      extRef:
        type: string
      name:
        type: string
      role:
        type: string
    type: object
  models.Attachments:
    properties:
      contentType:
        type: string
      createdAt:
        description: Automatically generated
        type: string
      description:
        type: string
      id:
        description: DB + JSON
        type: integer
      name:
        type: string
      refUserUploader:
        type: integer
      updatedAt:
        description: Automatically managed by trigger
        type: string
      url:
        type: string
    type: object
  models.Discovered:
    properties:
      condition:
        allOf:
        - $ref: '#/definitions/models.JSONBMap'
        description: db + json
      createdAt:
        description: Automatically generated
        type: string
      id:
        description: Auto-incremented integer ID
        type: integer
      show:
        description: condition was met
        type: boolean
      updatedAt:
        description: Automatically managed by trigger
        type: string
    type: object
  models.JSONBMap:
    additionalProperties:
      type: string
    type: object
  models.KnownLocations:
    properties:
      createdAt:
        description: Automatically generated
        type: string
      id:
        description: Auto-incremented integer ID
        type: integer
      latitude:
        description: Latitude as signed float
        type: number
      longitude:
        description: Longitude as signed float
        type: number
      name:
        type: string
      refId:
        type: integer
      refType:
        description: Db + json
        type: string
      refUserUploader:
        type: integer
      updatedAt:
        description: Automatically managed by trigger
        type: string
    type: object
  models.Notes:
    properties:
      attachments:
        description: only json -> Need to create the parse the json  to and from db
        items:
          type: integer
        type: array
      category:
        type: string
      createdAt:
        description: Automatically generated
        type: string
      description:
        type: string
      id:
        description: db + json
        type: integer
      name:
        type: string
      refUserUploader:
        type: integer
      updatedAt:
        description: Automatically managed by trigger
        type: string
    type: object
  models.Spots:
    properties:
      attachments:
        items:
          type: integer
        type: array
      createdAt:
        description: Automatically generated
        type: string
      description:
        type: string
      id:
        description: db + json
        type: integer
      location:
        description: only json -> Need to create the parse the json  to and from db
        type: integer
      name:
        type: string
      refUserUploader:
        type: integer
      updatedAt:
        description: Automatically managed by trigger
        type: string
    type: object
  models.Users:
    properties:
      bio:
        type: string
      birthday:
        type: string
      createdAt:
        description: Automatically generated
        type: string
      email:
        type: string
      extRef:
        type: string
      id:
        description: db + json
        type: integer
      name:
        type: string
      role:
        type: string
      updatedAt:
        description: Automatically managed by trigger
        type: string
    type: object
info:
  contact:
    email: guillermo.gc1994@gmail.com
    name: Guillermo Gomez
    url: https://github.com/guigomcha/famquest/
  description: Handles the connection to the DBs in DB Manager. PostgreSQL and MINIO
  license:
    name: Guillermo Gomez GPL V3
  termsOfService: http://swagger.io/terms/
  title: FamQuest DB Manager API
  version: "1.0"
paths:
  /attachment:
    get:
      description: Get a list of all attachments
      parameters:
      - description: Reference ID (optional)
        in: query
        name: refId
        type: integer
      - description: Reference Type (optional)
        enum:
        - spot
        - attachment
        - note
        in: query
        name: refType
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Attachments'
            type: array
      summary: Retrieve all attachments
      tags:
      - attachment
    post:
      consumes:
      - multipart/form-data
      description: Create a new attachment
      parameters:
      - description: image/* or media/*
        in: formData
        name: file
        required: true
        type: file
      - description: name of the attachment
        in: formData
        name: name
        required: true
        type: string
      - description: description of the attachment
        in: formData
        name: description
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Attachments'
      summary: Create a attachment
      tags:
      - attachment
  /attachment/{id}:
    delete:
      description: Delete a attachment and nullify its references in spots
      parameters:
      - description: Attachment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
      summary: Delete a attachment by ID
      tags:
      - attachment
    get:
      description: Get attachment details by ID
      parameters:
      - description: Attachment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Attachments'
      summary: Retrieve a attachment by ID
      tags:
      - attachment
    put:
      consumes:
      - application/json
      description: Update attachment details by ID
      parameters:
      - description: Attachment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Attachment data
        in: body
        name: attachment
        required: true
        schema:
          $ref: '#/definitions/models.APIAttachments'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Attachments'
      summary: Update a attachment by ID
      tags:
      - attachment
  /attachment/{id}/ref:
    put:
      description: Update the ref in a attachment details by ID
      parameters:
      - description: Attachment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Reference ID (optional)
        in: query
        name: refId
        required: true
        type: integer
      - description: Reference Type
        enum:
        - spot
        - attachment
        - note
        in: query
        name: refType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Attachments'
      summary: Update the ref
      tags:
      - attachment
  /configure:
    get:
      description: Connect and check dependencies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Configure
      tags:
      - Configure
  /discovered:
    get:
      description: Get a list of all discovereds
      parameters:
      - description: Reference ID (optional)
        in: query
        name: refId
        type: integer
      - description: Reference Type (optional)
        enum:
        - spot
        - attachment
        - note
        in: query
        name: refType
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Discovered'
            type: array
      summary: Retrieve all discovereds
      tags:
      - discovered
    post:
      consumes:
      - application/json
      description: Create a new discovered
      parameters:
      - description: Discovered data
        in: body
        name: discovered
        required: true
        schema:
          $ref: '#/definitions/models.APIDiscovered'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Discovered'
      summary: Create a discovered
      tags:
      - discovered
  /discovered/{id}:
    delete:
      description: Delete a discovered entry
      parameters:
      - description: Discovered ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
      summary: Delete a discovered by ID
      tags:
      - discovered
    get:
      description: Get discovered details by ID
      parameters:
      - description: Discovered ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Discovered'
      summary: Retrieve a discovered by ID
      tags:
      - discovered
    put:
      consumes:
      - application/json
      description: Update discovered details by ID
      parameters:
      - description: Discovered ID
        in: path
        name: id
        required: true
        type: integer
      - description: Discovered data
        in: body
        name: discovered
        required: true
        schema:
          $ref: '#/definitions/models.APIDiscovered'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Discovered'
      summary: Update a discovered by ID
      tags:
      - discovered
  /discovered/{id}/ref:
    put:
      description: Update the ref in a discovered details by ID
      parameters:
      - description: Discovered ID
        in: path
        name: id
        required: true
        type: integer
      - description: Reference ID (optional)
        in: query
        name: refId
        required: true
        type: integer
      - description: Reference Type
        enum:
        - spot
        - note
        - attachment
        in: query
        name: refType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Discovered'
      summary: Update the ref
      tags:
      - discovered
  /discovered/updateConditions:
    post:
      description: Updates discovered based on the user locations, age, etc.
      parameters:
      - description: Reference ID of the user to update
        in: query
        name: refId
        required: true
        type: integer
      - description: Reference Type
        enum:
        - user
        in: query
        name: refType
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The Ids of the discovered that were updated
          schema:
            items:
              type: integer
            type: array
      summary: Updates all discovered entries for a user
      tags:
      - discovered
  /health:
    get:
      description: Check the health of the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Health check
      tags:
      - health
  /location:
    get:
      description: Get a list of all locations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.KnownLocations'
            type: array
      summary: Retrieve all locations
      tags:
      - location
    post:
      consumes:
      - application/json
      description: Create a new location
      parameters:
      - description: Location data
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/models.APIKnownLocations'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.KnownLocations'
      summary: Create a location
      tags:
      - location
  /location/{id}:
    delete:
      description: Delete a location and nullify its references in spots
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
      summary: Delete a location by ID
      tags:
      - location
    get:
      description: Get location details by ID
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.KnownLocations'
      summary: Retrieve a location by ID
      tags:
      - location
    put:
      consumes:
      - application/json
      description: Update location details by ID
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      - description: Location data
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/models.APIKnownLocations'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.KnownLocations'
      summary: Update a location by ID
      tags:
      - location
  /location/{id}/ref:
    put:
      description: Update the ref in a location details by ID
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      - description: Reference ID (optional)
        in: query
        name: refId
        required: true
        type: integer
      - description: Reference Type
        enum:
        - spot
        in: query
        name: refType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.KnownLocations'
      summary: Update the ref
      tags:
      - location
  /note:
    get:
      description: Get a list of all notes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Notes'
            type: array
      summary: Retrieve all notes
      tags:
      - note
    post:
      consumes:
      - application/json
      description: Create a new note
      parameters:
      - description: Note data
        in: body
        name: note
        required: true
        schema:
          $ref: '#/definitions/models.APINotes'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Notes'
      summary: Create a note
      tags:
      - note
  /note/{id}:
    delete:
      description: Delete a note and nullify its references in notes
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
      summary: Delete a note by ID
      tags:
      - note
    get:
      description: Get note details by ID
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Notes'
      summary: Retrieve a note by ID
      tags:
      - note
    put:
      consumes:
      - application/json
      description: Update note details by ID
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: integer
      - description: Note data
        in: body
        name: note
        required: true
        schema:
          $ref: '#/definitions/models.APINotes'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Notes'
      summary: Update a note by ID
      tags:
      - note
  /note/{id}/ref:
    put:
      description: Update the ref in a note details by ID
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: integer
      - description: Reference ID (optional)
        in: query
        name: refId
        required: true
        type: integer
      - description: Reference Type
        enum:
        - spot
        - user
        in: query
        name: refType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Notes'
      summary: Update the ref
      tags:
      - note
  /spot:
    get:
      description: Get a list of all spots
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Spots'
            type: array
      summary: Retrieve all spots
      tags:
      - spot
    post:
      consumes:
      - application/json
      description: Create a new spot
      parameters:
      - description: Spot data
        in: body
        name: spot
        required: true
        schema:
          $ref: '#/definitions/models.APISpots'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Spots'
      summary: Create a spot
      tags:
      - spot
  /spot/{id}:
    delete:
      description: Delete a spot and nullify its references in spots
      parameters:
      - description: Spot ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
      summary: Delete a spot by ID
      tags:
      - spot
    get:
      description: Get spot details by ID
      parameters:
      - description: Spot ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Spots'
      summary: Retrieve a spot by ID
      tags:
      - spot
    put:
      consumes:
      - application/json
      description: Update spot details by ID
      parameters:
      - description: Spot ID
        in: path
        name: id
        required: true
        type: integer
      - description: Spot data
        in: body
        name: spot
        required: true
        schema:
          $ref: '#/definitions/models.APISpots'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Spots'
      summary: Update a spot by ID
      tags:
      - spot
  /user:
    get:
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Users'
            type: array
      summary: Retrieve all users
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.APIUsers'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Users'
      summary: Create a user
      tags:
      - user
  /user/{id}:
    delete:
      description: Delete a user and nullify its references in users
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
      summary: Delete a user by ID
      tags:
      - user
    get:
      description: Get user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Users'
      summary: Retrieve a user by ID
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.APIUsers'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Users'
      summary: Update a user by ID
      tags:
      - user
swagger: "2.0"
