// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Guillermo Gomez",
            "url": "https://github.com/guigomcha/famquest/",
            "email": "guillermo.gc1994@gmail.com"
        },
        "license": {
            "name": "Guillermo Gomez GPL V3"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Check the health of the service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/location": {
            "get": {
                "description": "Get a list of all locations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Retrieve all locations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.KnownLocations"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new location",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Create a location",
                "parameters": [
                    {
                        "description": "Location data",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APIKnownLocations"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.KnownLocations"
                        }
                    }
                }
            }
        },
        "/location/{id}": {
            "get": {
                "description": "Get location details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Retrieve a location by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.KnownLocations"
                        }
                    }
                }
            },
            "put": {
                "description": "Update location details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Update a location by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Location data",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APIKnownLocations"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.KnownLocations"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a location and nullify its references in spots",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Delete a location by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.APIKnownLocations": {
            "type": "object",
            "properties": {
                "latitude": {
                    "description": "Latitude as signed float",
                    "type": "number"
                },
                "longitude": {
                    "description": "Longitude as signed float",
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.KnownLocations": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "Automatically generated",
                    "type": "string"
                },
                "id": {
                    "description": "Db + json",
                    "type": "integer"
                },
                "latitude": {
                    "description": "Latitude as signed float",
                    "type": "number"
                },
                "longitude": {
                    "description": "Longitude as signed float",
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "description": "Automatically managed by trigger",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "FamQuest DB Manager API",
	Description:      "Handles the connection to the DBs in DB Manager. PostgreSQL and MINIO",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
