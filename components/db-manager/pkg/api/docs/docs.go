// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Guillermo Gomez",
            "url": "https://github.com/guigomcha/famquest/",
            "email": "guillermo.gc1994@gmail.com"
        },
        "license": {
            "name": "Guillermo Gomez GPL V3"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/attachment": {
            "get": {
                "description": "Get a list of all attachments",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attachment"
                ],
                "summary": "Retrieve all attachments",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reference ID (optional)",
                        "name": "refId",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "spot",
                            "attachment",
                            "note"
                        ],
                        "type": "string",
                        "description": "Reference Type (optional)",
                        "name": "refType",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Attachments"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new attachment",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attachment"
                ],
                "summary": "Create a attachment",
                "parameters": [
                    {
                        "type": "file",
                        "description": "image/* or audio/* or video/ or application/pdf",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "contentType",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "datetime",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Attachments"
                        }
                    }
                }
            }
        },
        "/attachment/{id}": {
            "get": {
                "description": "Get attachment details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attachment"
                ],
                "summary": "Retrieve a attachment by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Attachment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Attachments"
                        }
                    }
                }
            },
            "put": {
                "description": "Update attachment details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attachment"
                ],
                "summary": "Update a attachment by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Attachment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Attachment data",
                        "name": "attachment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APIAttachments"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Attachments"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a attachment and nullify its references in spots",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attachment"
                ],
                "summary": "Delete a attachment by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Attachment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/attachment/{id}/ref": {
            "put": {
                "description": "Update the ref in a attachment details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attachment"
                ],
                "summary": "Update the ref",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Attachment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Reference ID (optional)",
                        "name": "refId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "spot",
                            "attachment",
                            "note"
                        ],
                        "type": "string",
                        "description": "Reference Type",
                        "name": "refType",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Attachments"
                        }
                    }
                }
            }
        },
        "/configure": {
            "get": {
                "description": "Connect and check dependencies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Configure"
                ],
                "summary": "Configure",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/discovered": {
            "get": {
                "description": "Get a list of all discovereds",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discovered"
                ],
                "summary": "Retrieve all discovereds",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reference ID (optional)",
                        "name": "refId",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "spot",
                            "attachment",
                            "note"
                        ],
                        "type": "string",
                        "description": "Reference Type (optional)",
                        "name": "refType",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "filter for the specific user (optional)",
                        "name": "refUserUploader",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Discovered"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new discovered",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discovered"
                ],
                "summary": "Create a discovered",
                "parameters": [
                    {
                        "description": "Discovered data",
                        "name": "discovered",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APIDiscovered"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Discovered"
                        }
                    }
                }
            }
        },
        "/discovered/updateConditions": {
            "post": {
                "description": "Updates discovered based on the user locations, age, etc.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discovered"
                ],
                "summary": "Updates all discovered entries for a user",
                "responses": {
                    "200": {
                        "description": "The Ids of the discovered that were updated",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                }
            }
        },
        "/discovered/{id}": {
            "get": {
                "description": "Get discovered details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discovered"
                ],
                "summary": "Retrieve a discovered by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Discovered ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Discovered"
                        }
                    }
                }
            },
            "put": {
                "description": "Update discovered details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discovered"
                ],
                "summary": "Update a discovered by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Discovered ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Discovered data",
                        "name": "discovered",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APIDiscovered"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Discovered"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a discovered entry",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discovered"
                ],
                "summary": "Delete a discovered by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Discovered ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/discovered/{id}/ref": {
            "put": {
                "description": "Update the ref in a discovered details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discovered"
                ],
                "summary": "Update the ref",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Discovered ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Reference ID (optional)",
                        "name": "refId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "spot",
                            "note",
                            "attachment"
                        ],
                        "type": "string",
                        "description": "Reference Type",
                        "name": "refType",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Discovered"
                        }
                    }
                }
            }
        },
        "/familyTree": {
            "get": {
                "description": "Get a list of all familyTrees",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "familyTree"
                ],
                "summary": "Retrieve all familyTrees",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.FamilyTree"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new familyTree",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "familyTree"
                ],
                "summary": "Create a familyTree",
                "parameters": [
                    {
                        "description": "FamilyTree data",
                        "name": "familyTree",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APIFamilyTree"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.FamilyTree"
                        }
                    }
                }
            }
        },
        "/familyTree/{id}": {
            "get": {
                "description": "Get familyTree details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "familyTree"
                ],
                "summary": "Retrieve a familyTree by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "FamilyTree ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.FamilyTree"
                        }
                    }
                }
            },
            "put": {
                "description": "Update familyTree details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "familyTree"
                ],
                "summary": "Update a familyTree by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "FamilyTree ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "FamilyTree data",
                        "name": "familyTree",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APIFamilyTree"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.FamilyTree"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check the health of the service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/location": {
            "get": {
                "description": "Get a list of all locations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Retrieve all locations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.KnownLocations"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new location",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Create a location",
                "parameters": [
                    {
                        "description": "Location data",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APIKnownLocations"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.KnownLocations"
                        }
                    }
                }
            }
        },
        "/location/{id}": {
            "get": {
                "description": "Get location details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Retrieve a location by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.KnownLocations"
                        }
                    }
                }
            },
            "put": {
                "description": "Update location details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Update a location by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Location data",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APIKnownLocations"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.KnownLocations"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a location and nullify its references in spots",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Delete a location by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/location/{id}/ref": {
            "put": {
                "description": "Update the ref in a location details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Update the ref",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Reference ID (optional)",
                        "name": "refId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "spot",
                            "user"
                        ],
                        "type": "string",
                        "description": "Reference Type",
                        "name": "refType",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.KnownLocations"
                        }
                    }
                }
            }
        },
        "/note": {
            "get": {
                "description": "Get a list of all notes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "note"
                ],
                "summary": "Retrieve all notes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reference ID (optional)",
                        "name": "refId",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "spot",
                            "note"
                        ],
                        "type": "string",
                        "description": "Reference Type (optional)",
                        "name": "refType",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Notes"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new note",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "note"
                ],
                "summary": "Create a note",
                "parameters": [
                    {
                        "description": "Note data",
                        "name": "note",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APINotes"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Notes"
                        }
                    }
                }
            }
        },
        "/note/{id}": {
            "get": {
                "description": "Get note details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "note"
                ],
                "summary": "Retrieve a note by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Note ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Notes"
                        }
                    }
                }
            },
            "put": {
                "description": "Update note details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "note"
                ],
                "summary": "Update a note by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Note ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Note data",
                        "name": "note",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APINotes"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Notes"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a note and nullify its references in notes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "note"
                ],
                "summary": "Delete a note by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Note ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/note/{id}/ref": {
            "put": {
                "description": "Update the ref in a note details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "note"
                ],
                "summary": "Update the ref",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Note ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Reference ID (optional)",
                        "name": "refId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "spot",
                            "user"
                        ],
                        "type": "string",
                        "description": "Reference Type",
                        "name": "refType",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Notes"
                        }
                    }
                }
            }
        },
        "/spot": {
            "get": {
                "description": "Get a list of all spots",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spot"
                ],
                "summary": "Retrieve all spots",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Spots"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new spot",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spot"
                ],
                "summary": "Create a spot",
                "parameters": [
                    {
                        "description": "Spot data",
                        "name": "spot",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APISpots"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Spots"
                        }
                    }
                }
            }
        },
        "/spot/{id}": {
            "get": {
                "description": "Get spot details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spot"
                ],
                "summary": "Retrieve a spot by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Spot ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Spots"
                        }
                    }
                }
            },
            "put": {
                "description": "Update spot details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spot"
                ],
                "summary": "Update a spot by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Spot ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Spot data",
                        "name": "spot",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APISpots"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Spots"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a spot and nullify its references in spots",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "spot"
                ],
                "summary": "Delete a spot by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Spot ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/trip": {
            "get": {
                "description": "Get a list of all trips",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trip"
                ],
                "summary": "Retrieve all trips",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Trips"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new trip",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trip"
                ],
                "summary": "Create a trip",
                "parameters": [
                    {
                        "description": "Trip data",
                        "name": "trip",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APITrips"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Trips"
                        }
                    }
                }
            }
        },
        "/trip/{id}": {
            "get": {
                "description": "Get trip details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trip"
                ],
                "summary": "Retrieve a trip by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Trips"
                        }
                    }
                }
            },
            "put": {
                "description": "Update trip details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trip"
                ],
                "summary": "Update a trip by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Trip data",
                        "name": "trip",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APITrips"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Trips"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a trip and nullify its references in spots",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trip"
                ],
                "summary": "Delete a trip by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Trip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "Get a list of all users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Retrieve all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Users"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create a user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APIUsers"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "description": "Get user details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Retrieve a user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    }
                }
            },
            "put": {
                "description": "Update user details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update a user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.APIUsers"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user and nullify its references in users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete a user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.APIAttachments": {
            "type": "object",
            "properties": {
                "contentType": {
                    "type": "string"
                },
                "datetime": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.APIDiscovered": {
            "type": "object",
            "properties": {
                "condition": {
                    "description": "this will hold a JSONB in postgresql with the condition",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.JSONB"
                        }
                    ]
                },
                "show": {
                    "description": "condition was met",
                    "type": "boolean"
                }
            }
        },
        "models.APIFamilyTree": {
            "type": "object",
            "properties": {
                "familyTree": {
                    "description": "this will hold a JSONB in postgresql with the family_tree",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.JSONB"
                        }
                    ]
                }
            }
        },
        "models.APIKnownLocations": {
            "type": "object",
            "properties": {
                "latitude": {
                    "description": "Latitude as signed float",
                    "type": "number"
                },
                "longitude": {
                    "description": "Longitude as signed float",
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.APINotes": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "datetime": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.APISpots": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.APITrips": {
            "type": "object",
            "properties": {
                "geometry": {
                    "description": "JSONB geometry field",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.JSONB"
                        }
                    ]
                },
                "mode": {
                    "description": "\"car\" or \"foot\"",
                    "type": "string"
                },
                "refIdEnd": {
                    "description": "end reference",
                    "type": "integer"
                },
                "refIdStart": {
                    "description": "start reference",
                    "type": "integer"
                },
                "refType": {
                    "description": "\"spot\" or \"note\"",
                    "type": "string"
                }
            }
        },
        "models.APIUsers": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "birthday": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "extRef": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "passing": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "models.Attachments": {
            "type": "object",
            "properties": {
                "contentType": {
                    "type": "string"
                },
                "createdAt": {
                    "description": "Automatically generated",
                    "type": "string"
                },
                "datetime": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "description": "Auto-incremented integer ID",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "refId": {
                    "type": "integer"
                },
                "refType": {
                    "description": "DB + JSON",
                    "type": "string"
                },
                "refUserUploader": {
                    "type": "integer"
                },
                "updatedAt": {
                    "description": "Automatically managed by trigger",
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.Discovered": {
            "type": "object",
            "properties": {
                "condition": {
                    "description": "db + json",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.JSONB"
                        }
                    ]
                },
                "createdAt": {
                    "description": "Automatically generated",
                    "type": "string"
                },
                "id": {
                    "description": "Auto-incremented integer ID",
                    "type": "integer"
                },
                "refId": {
                    "type": "integer"
                },
                "refType": {
                    "type": "string"
                },
                "refUserUploader": {
                    "type": "integer"
                },
                "show": {
                    "description": "condition was met",
                    "type": "boolean"
                },
                "updatedAt": {
                    "description": "Automatically managed by trigger",
                    "type": "string"
                }
            }
        },
        "models.FamilyTree": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "Automatically generated",
                    "type": "string"
                },
                "familyTree": {
                    "description": "db + json",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.JSONB"
                        }
                    ]
                },
                "id": {
                    "description": "db + json",
                    "type": "integer"
                },
                "updatedAt": {
                    "description": "Automatically managed by trigger",
                    "type": "string"
                }
            }
        },
        "models.JSONB": {
            "type": "object",
            "additionalProperties": true
        },
        "models.KnownLocations": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "Automatically generated",
                    "type": "string"
                },
                "id": {
                    "description": "Auto-incremented integer ID",
                    "type": "integer"
                },
                "latitude": {
                    "description": "Latitude as signed float",
                    "type": "number"
                },
                "longitude": {
                    "description": "Longitude as signed float",
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "refId": {
                    "type": "integer"
                },
                "refType": {
                    "description": "Db + json",
                    "type": "string"
                },
                "refUserUploader": {
                    "type": "integer"
                },
                "updatedAt": {
                    "description": "Automatically managed by trigger",
                    "type": "string"
                }
            }
        },
        "models.Notes": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "createdAt": {
                    "description": "Automatically generated",
                    "type": "string"
                },
                "datetime": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "description": "Auto-incremented integer ID",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "refId": {
                    "type": "integer"
                },
                "refType": {
                    "description": "db + json",
                    "type": "string"
                },
                "refUserUploader": {
                    "type": "integer"
                },
                "updatedAt": {
                    "description": "Automatically managed by trigger",
                    "type": "string"
                }
            }
        },
        "models.Spots": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "Automatically generated",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "description": "db + json",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "refUserUploader": {
                    "type": "integer"
                },
                "updatedAt": {
                    "description": "Automatically managed by trigger",
                    "type": "string"
                }
            }
        },
        "models.Trips": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "geometry": {
                    "description": "JSONB geometry field",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.JSONB"
                        }
                    ]
                },
                "id": {
                    "description": "Auto-incremented ID",
                    "type": "integer"
                },
                "mode": {
                    "description": "\"car\" or \"foot\"",
                    "type": "string"
                },
                "refIdEnd": {
                    "description": "end reference",
                    "type": "integer"
                },
                "refIdStart": {
                    "description": "start reference",
                    "type": "integer"
                },
                "refTypeEnd": {
                    "description": "\"spot\" or \"note\"",
                    "type": "string"
                },
                "refTypeStart": {
                    "description": "\"spot\" or \"note\"",
                    "type": "string"
                },
                "refUserUploader": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "uuid": {
                    "description": "UUID as primary key",
                    "type": "string"
                }
            }
        },
        "models.Users": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "birthday": {
                    "type": "string"
                },
                "createdAt": {
                    "description": "Automatically generated",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "extRef": {
                    "type": "string"
                },
                "id": {
                    "description": "db + json",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "passing": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updatedAt": {
                    "description": "Automatically managed by trigger",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.4.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "FamQuest DB Manager API",
	Description:      "Handles the connection to the DBs in DB Manager. PostgreSQL and MINIO",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
