package main

import (
	"fmt"
	"log"

	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"
)

const (
	DB_USER     = "your_username"
	DB_PASSWORD = "your_password"
	DB_NAME     = "your_dbname"
	DB_HOST     = "localhost"
	DB_PORT     = "5432"
)

type Table1 struct {
	ID   int    `db:"id"`
	Name string `db:"name"`
}

type Table2 struct {
	ID   int    `db:"id"`
	Name string `db:"name"`
}

type Table3 struct {
	ID       int `db:"id"`
	Table1ID int `db:"table1_id"` // link to Table 1
	Table2ID int `db:"table2_id"` // link to Table 2
}

type Table1Table2 struct {
	Table1ID int `db:"table1_id"`
	Table2ID int `db:"table2_id"`
}

func main() {
	connStr := fmt.Sprintf("user=%s password=%s dbname=%s host=%s port=%s sslmode=disable",
		DB_USER, DB_PASSWORD, DB_NAME, DB_HOST, DB_PORT)
	db, err := sqlx.Connect("postgres", connStr)
	if err != nil {
		log.Fatalln(err)
	}
	defer db.Close()

	// Create tables
	schema := `
	CREATE TABLE IF NOT EXISTS table1 (
		id SERIAL PRIMARY KEY,
		name TEXT
	);
	CREATE TABLE IF NOT EXISTS table2 (
		id SERIAL PRIMARY KEY,
		name TEXT
	);
	CREATE TABLE IF NOT EXISTS table1_table2 (
		table1_id INT REFERENCES table1(id),
		table2_id INT REFERENCES table2(id),
		PRIMARY KEY (table1_id, table2_id)
	);
	CREATE TABLE IF NOT EXISTS table3 (
		id SERIAL PRIMARY KEY,
		table1_id INT REFERENCES table1(id),
		table2_id INT REFERENCES table2(id)
	);
	`

	if _, err := db.Exec(schema); err != nil {
		log.Fatalln(err)
	}

	// Insert dummy data into Table2
	table2Entries := []Table2{
		{Name: "Table2 Entry 1"},
		{Name: "Table2 Entry 2"},
		{Name: "Table2 Entry 3"},
	}

	for _, entry := range table2Entries {
		_, err := db.NamedExec("INSERT INTO table2 (name) VALUES (:name)", &entry)
		if err != nil {
			log.Fatalln(err)
		}
	}

	// Insert a dummy entry into Table1
	table1Entry := Table1{Name: "Table1 Entry"}
	_, err = db.NamedExec("INSERT INTO table1 (name) VALUES (:name)", &table1Entry)
	if err != nil {
		log.Fatalln(err)
	}

	// Get the ID of the inserted Table1 entry
	var table1ID int
	err = db.Get(&table1ID, "SELECT id FROM table1 WHERE name = $1", table1Entry.Name)
	if err != nil {
		log.Fatalln(err)
	}

	// Link multiple Table2 entries to Table1 in the join table
	table1Table2Links := []Table1Table2{
		{Table1ID: table1ID, Table2ID: 1}, // Linking to Table2 Entry 1
		{Table1ID: table1ID, Table2ID: 2}, // Linking to Table2 Entry 2
	}

	for _, link := range table1Table2Links {
		_, err := db.NamedExec("INSERT INTO table1_table2 (table1_id, table2_id) VALUES (:table1_id, :table2_id)", &link)
		if err != nil {
			log.Fatalln(err)
		}
	}

	// Insert an additional entry into Table3 linked to Table1 and Table2
	table3Entry := Table3{Table1ID: table1ID, Table2ID: 2} // linking to Table1 Entry and Table2 Entry 2
	_, err = db.NamedExec("INSERT INTO table3 (table1_id, table2_id) VALUES (:table1_id, :table2_id)", &table3Entry)
	if err != nil {
		log.Fatalln(err)
	}

	// Fetch and display data
	var table1Data []Table1
	var table2Data []Table2
	var table3Data []Table3

	err = db.Select(&table1Data, "SELECT * FROM table1")
	if err != nil {
		log.Fatalln(err)
	}

	err = db.Select(&table2Data, "SELECT * FROM table2")
	if err != nil {
		log.Fatalln(err)
	}

	err = db.Select(&table3Data, "SELECT * FROM table3")
	if err != nil {
		log.Fatalln(err)
	}

	// Fetch links from the join table
	var table1Table2LinksData []Table1Table2
	err = db.Select(&table1Table2LinksData, "SELECT * FROM table1_table2")
	if err != nil {
		log.Fatalln(err)
	}

	fmt.Println("Table 1 Data:")
	for _, t1 := range table1Data {
		fmt.Printf("ID: %d, Name: %s\n", t1.ID, t1.Name)
		for _, link := range table1Table2LinksData {
			if link.Table1ID == t1.ID {
				fmt.Printf("  Links to Table2 ID: %d\n", link.Table2ID)
			}
		}
	}

	fmt.Println("\nTable 2 Data:")
	for _, t2 := range table2Data {
		fmt.Printf("ID: %d, Name: %s\n", t2.ID, t2.Name)
	}

	fmt.Println("\nTable 3 Data:")
	for _, t3 := range table3Data {
		fmt.Printf("ID: %d, Table1ID: %d, Table2ID: %d\n", t3.ID, t3.Table1ID, t3.Table2ID)
	}
}
